
C_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000cf  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000083  00000000  00000000  000002b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d0  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017f  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000061  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sub_delay>:
#include <avr/io.h>

void sub_delay()
{
	TCNT1=63583;
  80:	8f e5       	ldi	r24, 0x5F	; 95
  82:	98 ef       	ldi	r25, 0xF8	; 248
  84:	90 93 85 00 	sts	0x0085, r25
  88:	80 93 84 00 	sts	0x0084, r24
	TCCR1A=0x00;
  8c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x05;
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24
	while((TIFR1&0x01)==0);
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <sub_delay+0x16>
	TCCR1B=0x00;
  9a:	10 92 81 00 	sts	0x0081, r1
	TIFR1|=(1<<TOV1);
  9e:	b0 9a       	sbi	0x16, 0	; 22
	PORTC=PORTC ^(0x01);
  a0:	98 b1       	in	r25, 0x08	; 8
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	08 95       	ret

000000aa <main>:

int main(void)
{
	unsigned char toggle1=0;
	unsigned char toggle2=0;
	DDRB=0xFF;			//PORTB will be used to output the counter
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;			//Initialize the out to output LOW signal
  ae:	15 b8       	out	0x05, r1	; 5
	DDRC=0x31;			//PC.4 and 5 were used to output every 5 and 10 rising pulses due to availability on the board
  b0:	81 e3       	ldi	r24, 0x31	; 49
  b2:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;			//Clears the PORTC to output LOW signal
  b4:	18 b8       	out	0x08, r1	; 8
	DDRD=0x00;			//PD.4 is set to be used at T0 to take input from the clock generated
  b6:	1a b8       	out	0x0a, r1	; 10
	
	TCNT0=0x00;
  b8:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0x00;
  ba:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x07;
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	85 bd       	out	0x25, r24	; 37
}

int main(void)
{
	unsigned char toggle1=0;
	unsigned char toggle2=0;
  c0:	d0 e0       	ldi	r29, 0x00	; 0
	PORTC=PORTC ^(0x01);
}

int main(void)
{
	unsigned char toggle1=0;
  c2:	c0 e0       	ldi	r28, 0x00	; 0
		if ((PORTC&(0x01))==1){
		++toggle1;
		++toggle2;
		}
		if (toggle1==5){
			PORTC^=(1<<PORTC4);
  c4:	68 94       	set
  c6:	ff 24       	eor	r15, r15
  c8:	f4 f8       	bld	r15, 4
			toggle1=0;
  ca:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (toggle2==10){
			PORTC^=((1<<PORTC5));
  cc:	00 e2       	ldi	r16, 0x20	; 32
	TCNT0=0x00;
	TCCR0A=0x00;
	TCCR0B=0x07;
	
	while(1){
		sub_delay();	//Subroutine to cause a delay of 0.25s which will cause a 5s period for the clock
  ce:	0e 94 40 00 	call	0x80	; 0x80 <sub_delay>
		PORTB=TCNT0;
  d2:	86 b5       	in	r24, 0x26	; 38
  d4:	85 b9       	out	0x05, r24	; 5
		if ((PORTC&(0x01))==1){
  d6:	40 9b       	sbis	0x08, 0	; 8
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x34>
		++toggle1;
  da:	cf 5f       	subi	r28, 0xFF	; 255
		++toggle2;
  dc:	df 5f       	subi	r29, 0xFF	; 255
		}
		if (toggle1==5){
  de:	c5 30       	cpi	r28, 0x05	; 5
  e0:	21 f4       	brne	.+8      	; 0xea <main+0x40>
			PORTC^=(1<<PORTC4);
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8f 25       	eor	r24, r15
  e6:	88 b9       	out	0x08, r24	; 8
			toggle1=0;
  e8:	c1 2f       	mov	r28, r17
		}
		if (toggle2==10){
  ea:	da 30       	cpi	r29, 0x0A	; 10
  ec:	81 f7       	brne	.-32     	; 0xce <main+0x24>
			PORTC^=((1<<PORTC5));
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 27       	eor	r24, r16
  f2:	88 b9       	out	0x08, r24	; 8
			toggle2=0;
  f4:	d1 2f       	mov	r29, r17
  f6:	eb cf       	rjmp	.-42     	; 0xce <main+0x24>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
