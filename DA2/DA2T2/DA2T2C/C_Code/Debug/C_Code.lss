
C_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b1  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c9  00000000  00000000  000002e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016f  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sub_delay>:
#include <avr/io.h>

void sub_delay()
//delay subroutine that creates a 50% duty cycle clock w/ period of 5 seconds
{
	TCNT1=63583;				//sets counter to 63583, which takes 0.25 s to overflow
  80:	8f e5       	ldi	r24, 0x5F	; 95
  82:	98 ef       	ldi	r25, 0xF8	; 248
  84:	90 93 85 00 	sts	0x0085, r25
  88:	80 93 84 00 	sts	0x0084, r24
	TCCR1A=0x00;				//normal more operation
  8c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x05;				//prescaler of 1024
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24
	while((TIFR1&0x01)==0);		//loops until TOV1 is set
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <sub_delay+0x16>
	TCCR1B=0x00;				//stops the timer
  9a:	10 92 81 00 	sts	0x0081, r1
	TIFR1|=(1<<TOV1);			//clear TOV1 flag
  9e:	b0 9a       	sbi	0x16, 0	; 22
	PORTC=PORTC ^(0x01);		//xor PORTC, PC.0 specifically to toggle a clock
  a0:	98 b1       	in	r25, 0x08	; 8
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	08 95       	ret

000000aa <main>:



int main(void)
{
	DDRB=0xFF;					//PORTB will be used to output the counter
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;					//Initialize the out to output LOW signal
  ae:	15 b8       	out	0x05, r1	; 5
	DDRC=0x31;					//PC.4 and 5 were used to output every 5 and 10 rising pulses due to availability on the board
  b0:	81 e3       	ldi	r24, 0x31	; 49
  b2:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;					//Clears the PORTC to output LOW signal
  b4:	18 b8       	out	0x08, r1	; 8
	DDRD=0x00;					//PD.4 is set to be used at T0 to take input from the clock generated
  b6:	1a b8       	out	0x0a, r1	; 10
	
	TCNT0=0x00;					//counter 0 that will output to PORTB
  b8:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0x00;				//Setting counter to normal mode operation
  ba:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x07;				//sets counter to accept external clock (PD4)
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	85 bd       	out	0x25, r24	; 37
	
	while(1)
	//while loop that will execute forever
	{
		sub_delay();			//Subroutine to cause a delay of 0.25s which will cause a 5s period for the clock
  c0:	0e 94 40 00 	call	0x80	; 0x80 <sub_delay>
		PORTB=TCNT0;			//output counter/timer0 to PORTB (8 bit leds)
  c4:	86 b5       	in	r24, 0x26	; 38
  c6:	85 b9       	out	0x05, r24	; 5
	}
  c8:	fb cf       	rjmp	.-10     	; 0xc0 <main+0x16>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
