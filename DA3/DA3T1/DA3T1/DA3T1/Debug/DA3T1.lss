
DA3T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ce  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000008c  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000115  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000a4  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_21>:
#define FOSC 8000000 // Clock Speed
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD -1

ISR(ADC_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
	while(!(UCSR0A&(1<<UDRE0)));
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 ff       	sbrs	r24, 5
  98:	fd cf       	rjmp	.-6      	; 0x94 <__vector_21+0x14>
	UDR0 = ADCH; // only need to read the high value for 8 bit
  9a:	80 91 79 00 	lds	r24, 0x0079
  9e:	80 93 c6 00 	sts	0x00C6, r24
}
  a2:	ff 91       	pop	r31
  a4:	ef 91       	pop	r30
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <wait>:

void wait ()
{
	TCNT1=57724;				//sets counter to 49911, which takes 1 s to overflow
  b2:	8c e7       	ldi	r24, 0x7C	; 124
  b4:	91 ee       	ldi	r25, 0xE1	; 225
  b6:	90 93 85 00 	sts	0x0085, r25
  ba:	80 93 84 00 	sts	0x0084, r24
	TCCR1A=0x00;				//normal more operation
  be:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x05;				//prescaler of 1024
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	80 93 81 00 	sts	0x0081, r24
	while((TIFR1&0x01)==0);		//loops until TOV1 is set
  c8:	b0 9b       	sbis	0x16, 0	; 22
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <wait+0x16>
	TCCR1B=0x00;				//stops the timer
  cc:	10 92 81 00 	sts	0x0081, r1
	TIFR1|=(1<<TOV1);			//clear TOV1 flag
  d0:	b0 9a       	sbi	0x16, 0	; 22
  d2:	08 95       	ret

000000d4 <main>:
}

int main( void )
{
	/*Set baud rate */
	UBRR0H = ((MYUBRR)>>8);
  d4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = MYUBRR;
  d8:	83 e3       	ldi	r24, 0x33	; 51
  da:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0B |= (1 << TXEN0); // Enable transmitter
  de:	e1 ec       	ldi	r30, 0xC1	; 193
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0); // Enable transmitter interrupt
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stp
  ee:	e2 ec       	ldi	r30, 0xC2	; 194
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	86 60       	ori	r24, 0x06	; 6
  f6:	80 83       	st	Z, r24
	ADMUX |= 0x08;		//Set to use internal temp sensor, Ref of 1.1V, left adjust
  f8:	ec e7       	ldi	r30, 0x7C	; 124
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	87 60       	ori	r24, 0x07	; 7
 110:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
 112:	80 81       	ld	r24, Z
 114:	80 62       	ori	r24, 0x20	; 32
 116:	80 83       	st	Z, r24
	ADCSRB = 0x06;			// Start ADC when overflow flag is set
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADEN); 	// Enable the ADC
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); 	// Enable Interrupts
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
	
	sei();
 12a:	78 94       	sei
	while(1)
	{
		wait(); // Main loop
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <wait>
 130:	fd cf       	rjmp	.-6      	; 0x12c <main+0x58>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
