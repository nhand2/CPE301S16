
DA5T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001c3  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000146  00000000  00000000  00000447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000014f  00000000  00000000  0000058d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001cc  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delay>:

void delay(signed int d)
//delay subroutine
{
	signed n;
	for(n=d; n>0; n--) //as long as n>0, decrease value
  90:	18 16       	cp	r1, r24
  92:	19 06       	cpc	r1, r25
  94:	44 f4       	brge	.+16     	; 0xa6 <delay+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	ef ec       	ldi	r30, 0xCF	; 207
  98:	f7 e0       	ldi	r31, 0x07	; 7
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <delay+0xa>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <delay+0x10>
  a0:	00 00       	nop
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	c1 f7       	brne	.-16     	; 0x96 <delay+0x6>
  a6:	08 95       	ret

000000a8 <init_328>:
}

void init_328(void)
//subroutine to initialize all counter/adc used in the application
{
	ADMUX|=(1<<REFS0);	//use Vcc as ref (0.1uF cap  attached)
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC)|(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 6e       	ori	r24, 0xEF	; 239
  ba:	80 83       	st	Z, r24
	//start conversion; enable adc; enable interrupts; select 128 prescaler;
	//auto trigger enable; ADC0 used
	ADCSRB=0; //adc in free running mode
  bc:	10 92 7b 00 	sts	0x007B, r1
  c0:	08 95       	ret

000000c2 <__vector_21>:
}

ISR (ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	ADCvalue=ADC; //reads all 16-bits of ADCH:ADCL (0-1023 from pot)
  e4:	80 91 78 00 	lds	r24, 0x0078
  e8:	90 91 79 00 	lds	r25, 0x0079
  ec:	90 93 01 01 	sts	0x0101, r25
  f0:	80 93 00 01 	sts	0x0100, r24
	PORTB = 0x66; //output first step of stepper motor 
  f4:	86 e6       	ldi	r24, 0x66	; 102
  f6:	85 b9       	out	0x05, r24	; 5
	delay(ADCvalue); //hold this step for the delay (the larger the slower the stepper)
  f8:	80 91 00 01 	lds	r24, 0x0100
  fc:	90 91 01 01 	lds	r25, 0x0101
 100:	0e 94 48 00 	call	0x90	; 0x90 <delay>
	PORTB = 0xCC;  //output second step
 104:	8c ec       	ldi	r24, 0xCC	; 204
 106:	85 b9       	out	0x05, r24	; 5
	delay(ADCvalue); //hold for same value
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	0e 94 48 00 	call	0x90	; 0x90 <delay>
	PORTB = 0x99; //output third step
 114:	89 e9       	ldi	r24, 0x99	; 153
 116:	85 b9       	out	0x05, r24	; 5
	delay(ADCvalue); //hold for same value
 118:	80 91 00 01 	lds	r24, 0x0100
 11c:	90 91 01 01 	lds	r25, 0x0101
 120:	0e 94 48 00 	call	0x90	; 0x90 <delay>
	PORTB = 0x33; //output fourth step
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	85 b9       	out	0x05, r24	; 5
	delay(ADCvalue); //stay for same value
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	90 91 01 01 	lds	r25, 0x0101
 130:	0e 94 48 00 	call	0x90	; 0x90 <delay>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:

int main()
{
	DDRC = 0x00; //make PORTC input pins
 156:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF; //make PORTB output pin
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	84 b9       	out	0x04, r24	; 4
	init_328(); //initialize adc
 15c:	0e 94 54 00 	call	0xa8	; 0xa8 <init_328>
	sei(); //enable global interrupts
 160:	78 94       	sei
	while(1)
	{
	};
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0xc>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
