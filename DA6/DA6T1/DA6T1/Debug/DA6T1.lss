
DA6T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d2  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000218  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f5  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000230  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  9e:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_328>:

volatile unsigned int ADCvalue; //adc value buffer
void init_328(void)
//subroutine to initialize all counter/adc used in the application
{
	ADMUX|=(1<<REFS0);	//use Vcc as ref (0.1uF cap  attached)
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC)|(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 6e       	ori	r24, 0xEF	; 239
  b8:	80 83       	st	Z, r24
	//start conversion; enable adc; enable interrupts; select 128 prescaler;
	//auto trigger enable; ADC0 used
	ADCSRB=0;
  ba:	10 92 7b 00 	sts	0x007B, r1
  be:	08 95       	ret

000000c0 <lcdCommanda>:
}


void lcdCommanda (unsigned char cmnd)
{
	LCD_DPRT = cmnd; //send cmnd to data port
  c0:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT &= ~(1<<LCD_RS); //RS = 0 for command
  c2:	28 98       	cbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
  c4:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  c6:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f e7       	ldi	r18, 0x7F	; 127
  ca:	89 ea       	ldi	r24, 0xA9	; 169
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <lcdCommanda+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcdCommanda+0x18>
  d8:	00 00       	nop
	_delay_ms(150); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
  da:	2a 98       	cbi	0x05, 2	; 5
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <lcdCommanda+0x22>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcdCommanda+0x2c>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <lcdData>:
	_delay_ms(100); //wait to make enable wide
}

void lcdData(unsigned char data)
{
	LCD_DPRT = data; //send data to data port
  f0:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT |= (1<<LCD_RS); //RS = 1 for data
  f2:	28 9a       	sbi	0x05, 0	; 5
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0 for write
  f4:	29 98       	cbi	0x05, 1	; 5
	LCD_CPRT |= (1<<LCD_EN); //EN = 1 for H-to-L pulse
  f6:	2a 9a       	sbi	0x05, 2	; 5
  f8:	2f e7       	ldi	r18, 0x7F	; 127
  fa:	89 ea       	ldi	r24, 0xA9	; 169
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <lcdData+0xe>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcdData+0x18>
 108:	00 00       	nop
	_delay_ms(150); //wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN); //EN = 0 for H-to_L pulse
 10a:	2a 98       	cbi	0x05, 2	; 5
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	80 e7       	ldi	r24, 0x70	; 112
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <lcdData+0x22>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcdData+0x2c>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <lcd_init>:
	_delay_ms(100); //wait to make enable wide
}

void lcd_init()
{
	LCD_DDDR = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a b9       	out	0x0a, r24	; 10
	LCD_CDDR = 0xFF;
 124:	84 b9       	out	0x04, r24	; 4
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
 126:	2a 98       	cbi	0x05, 2	; 5
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ed       	ldi	r24, 0xD3	; 211
 12c:	90 e3       	ldi	r25, 0x30	; 48
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_init+0xe>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_init+0x18>
 138:	00 00       	nop
	_delay_ms(2000); //wait for init
	lcdCommanda(0x38); //inti. LCD 2 line, 5x7
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdCommanda>
	lcdCommanda(0x0E); //display on, cursor on
 140:	8e e0       	ldi	r24, 0x0E	; 14
 142:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdCommanda>
	lcdCommanda(0x01); //clear LCD
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdCommanda>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	83 ed       	ldi	r24, 0xD3	; 211
 150:	90 e3       	ldi	r25, 0x30	; 48
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <lcd_init+0x32>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_init+0x3c>
 15c:	00 00       	nop
	_delay_ms(2000); //wait
	lcdCommanda(0x06); //shift cursor right
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdCommanda>
 164:	08 95       	ret

00000166 <lcd_gotoxy>:
}
//****************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
//choose which position on the LED to display message
//our module is 16x1, this y=>x, but on the second half
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <lcd_gotoxy+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <lcd_gotoxy+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
 172:	90 e8       	ldi	r25, 0x80	; 128
 174:	99 83       	std	Y+1, r25	; 0x01
 176:	90 ec       	ldi	r25, 0xC0	; 192
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	94 e9       	ldi	r25, 0x94	; 148
 17c:	9b 83       	std	Y+3, r25	; 0x03
 17e:	94 ed       	ldi	r25, 0xD4	; 212
 180:	9c 83       	std	Y+4, r25	; 0x04
 182:	81 50       	subi	r24, 0x01	; 1
	lcdCommanda(firstCharAdr[y-1] + x -1);
 184:	fe 01       	movw	r30, r28
 186:	e6 0f       	add	r30, r22
 188:	f1 1d       	adc	r31, r1
 18a:	90 81       	ld	r25, Z
 18c:	89 0f       	add	r24, r25
 18e:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdCommanda>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	80 e7       	ldi	r24, 0x70	; 112
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <lcd_gotoxy+0x32>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_gotoxy+0x3c>
 1a2:	00 00       	nop
	_delay_ms(100);
}
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_print>:

void lcd_print(char * str)
//prints the string array, one cell at a time (ascii)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i]!=0)
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	59 f0       	breq	.+22     	; 0x1d6 <lcd_print+0x24>
 1c0:	8f 01       	movw	r16, r30
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 1c4:	0e 94 78 00 	call	0xf0	; 0xf0 <lcdData>
		i++;
 1c8:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_print(char * str)
//prints the string array, one cell at a time (ascii)
{
	unsigned char i = 0;
	while (str[i]!=0)
 1ca:	f8 01       	movw	r30, r16
 1cc:	ec 0f       	add	r30, r28
 1ce:	f1 1d       	adc	r31, r1
 1d0:	80 81       	ld	r24, Z
 1d2:	81 11       	cpse	r24, r1
 1d4:	f7 cf       	rjmp	.-18     	; 0x1c4 <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <__vector_21>:
	ADCSRB=0;
	//adc in free running mode
}

ISR (ADC_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	char *temperature="00"; //temperature string array
	char temp; //temp place holder
	ADCvalue=ADC; //reads all 16-bits of ADCH:ADCL
 200:	80 91 78 00 	lds	r24, 0x0078
 204:	90 91 79 00 	lds	r25, 0x0079
 208:	90 93 15 01 	sts	0x0115, r25
 20c:	80 93 14 01 	sts	0x0114, r24
	ADCvalue=(ADCvalue)*(500.0/1024.0); //convert the read ADCvalue to temperature
 210:	60 91 14 01 	lds	r22, 0x0114
 214:	70 91 15 01 	lds	r23, 0x0115
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 c6 01 	call	0x38c	; 0x38c <__floatunsisf>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	4a ef       	ldi	r20, 0xFA	; 250
 226:	5e e3       	ldi	r21, 0x3E	; 62
 228:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 22c:	0e 94 97 01 	call	0x32e	; 0x32e <__fixunssfsi>
 230:	70 93 15 01 	sts	0x0115, r23
 234:	60 93 14 01 	sts	0x0114, r22
	//500.0=>(Vref * 100)=>(5V * 100)
	//divide by 1024, the max for the ADC values (0-1024)
	temp=(ADCvalue/10); //divide by 10 to get the 10's place digit
 238:	20 91 14 01 	lds	r18, 0x0114
 23c:	30 91 15 01 	lds	r19, 0x0115
	temperature[0]=temp+48; //add ascii '0' to display on LCD
 240:	e0 e0       	ldi	r30, 0x00	; 0
 242:	f1 e0       	ldi	r31, 0x01	; 1
	char temp; //temp place holder
	ADCvalue=ADC; //reads all 16-bits of ADCH:ADCL
	ADCvalue=(ADCvalue)*(500.0/1024.0); //convert the read ADCvalue to temperature
	//500.0=>(Vref * 100)=>(5V * 100)
	//divide by 1024, the max for the ADC values (0-1024)
	temp=(ADCvalue/10); //divide by 10 to get the 10's place digit
 244:	ad ec       	ldi	r26, 0xCD	; 205
 246:	bc ec       	ldi	r27, 0xCC	; 204
 248:	0e 94 c1 02 	call	0x582	; 0x582 <__umulhisi3>
 24c:	96 95       	lsr	r25
 24e:	87 95       	ror	r24
 250:	96 95       	lsr	r25
 252:	87 95       	ror	r24
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
	temperature[0]=temp+48; //add ascii '0' to display on LCD
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	80 83       	st	Z, r24
	temp=(ADCvalue%10); //modulo by 10 to get 1's place digit
 25c:	40 91 14 01 	lds	r20, 0x0114
 260:	50 91 15 01 	lds	r21, 0x0115
 264:	9a 01       	movw	r18, r20
 266:	0e 94 c1 02 	call	0x582	; 0x582 <__umulhisi3>
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	9c 01       	movw	r18, r24
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	82 0f       	add	r24, r18
 28a:	93 1f       	adc	r25, r19
 28c:	48 1b       	sub	r20, r24
 28e:	59 0b       	sbc	r21, r25
	temperature[1]=temp+ 48; //add ascii '0' to get display on LCD
 290:	40 5d       	subi	r20, 0xD0	; 208
 292:	41 83       	std	Z+1, r20	; 0x01
	lcd_gotoxy(5,2); //move to cell 5 on second half of lcd
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_gotoxy>
	lcd_print(temperature); //print the converted temperature string array
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	89 e6       	ldi	r24, 0x69	; 105
 2ac:	98 e1       	ldi	r25, 0x18	; 24
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <__vector_21+0xd0>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <__vector_21+0xda>
 2b8:	00 00       	nop
	_delay_ms(1000); //wait 1 seconds before retreiving data again
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:

int main(void)
{
	char *degree;
	
	lcd_init();	//initialize the lcd module
 2dc:	0e 94 90 00 	call	0x120	; 0x120 <lcd_init>
	lcd_gotoxy(1,1); //display first 8 characters of "temperature"
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_gotoxy>
	lcd_print("Temperat");
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(1,2); //display last 4 characters of "temperature:"
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_gotoxy>
	lcd_print("ure:");
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(7,2); //display degress symbol 2nd half, second to last cell
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_gotoxy>
	degree[0]=223; //set to ASCII degree symbol
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2f ed       	ldi	r18, 0xDF	; 223
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
	lcd_print(degree);
 312:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(8,2); //display F for farenheit
 316:	62 e0       	ldi	r22, 0x02	; 2
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_gotoxy>
	lcd_print("F");
 31e:	81 e1       	ldi	r24, 0x11	; 17
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	init_328();	//initialize the adc
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <init_328>
	sei(); //enable interrupts
 32a:	78 94       	sei
	while(1);
 32c:	ff cf       	rjmp	.-2      	; 0x32c <main+0x50>

0000032e <__fixunssfsi>:
 32e:	0e 94 0b 02 	call	0x416	; 0x416 <__fp_splitA>
 332:	88 f0       	brcs	.+34     	; 0x356 <__fixunssfsi+0x28>
 334:	9f 57       	subi	r25, 0x7F	; 127
 336:	98 f0       	brcs	.+38     	; 0x35e <__fixunssfsi+0x30>
 338:	b9 2f       	mov	r27, r25
 33a:	99 27       	eor	r25, r25
 33c:	b7 51       	subi	r27, 0x17	; 23
 33e:	b0 f0       	brcs	.+44     	; 0x36c <__fixunssfsi+0x3e>
 340:	e1 f0       	breq	.+56     	; 0x37a <__fixunssfsi+0x4c>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	1a f0       	brmi	.+6      	; 0x352 <__fixunssfsi+0x24>
 34c:	ba 95       	dec	r27
 34e:	c9 f7       	brne	.-14     	; 0x342 <__fixunssfsi+0x14>
 350:	14 c0       	rjmp	.+40     	; 0x37a <__fixunssfsi+0x4c>
 352:	b1 30       	cpi	r27, 0x01	; 1
 354:	91 f0       	breq	.+36     	; 0x37a <__fixunssfsi+0x4c>
 356:	0e 94 25 02 	call	0x44a	; 0x44a <__fp_zero>
 35a:	b1 e0       	ldi	r27, 0x01	; 1
 35c:	08 95       	ret
 35e:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_zero>
 362:	67 2f       	mov	r22, r23
 364:	78 2f       	mov	r23, r24
 366:	88 27       	eor	r24, r24
 368:	b8 5f       	subi	r27, 0xF8	; 248
 36a:	39 f0       	breq	.+14     	; 0x37a <__fixunssfsi+0x4c>
 36c:	b9 3f       	cpi	r27, 0xF9	; 249
 36e:	cc f3       	brlt	.-14     	; 0x362 <__fixunssfsi+0x34>
 370:	86 95       	lsr	r24
 372:	77 95       	ror	r23
 374:	67 95       	ror	r22
 376:	b3 95       	inc	r27
 378:	d9 f7       	brne	.-10     	; 0x370 <__fixunssfsi+0x42>
 37a:	3e f4       	brtc	.+14     	; 0x38a <__fixunssfsi+0x5c>
 37c:	90 95       	com	r25
 37e:	80 95       	com	r24
 380:	70 95       	com	r23
 382:	61 95       	neg	r22
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	8f 4f       	sbci	r24, 0xFF	; 255
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	08 95       	ret

0000038c <__floatunsisf>:
 38c:	e8 94       	clt
 38e:	09 c0       	rjmp	.+18     	; 0x3a2 <__floatsisf+0x12>

00000390 <__floatsisf>:
 390:	97 fb       	bst	r25, 7
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__floatsisf+0x12>
 394:	90 95       	com	r25
 396:	80 95       	com	r24
 398:	70 95       	com	r23
 39a:	61 95       	neg	r22
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	8f 4f       	sbci	r24, 0xFF	; 255
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	99 23       	and	r25, r25
 3a4:	a9 f0       	breq	.+42     	; 0x3d0 <__floatsisf+0x40>
 3a6:	f9 2f       	mov	r31, r25
 3a8:	96 e9       	ldi	r25, 0x96	; 150
 3aa:	bb 27       	eor	r27, r27
 3ac:	93 95       	inc	r25
 3ae:	f6 95       	lsr	r31
 3b0:	87 95       	ror	r24
 3b2:	77 95       	ror	r23
 3b4:	67 95       	ror	r22
 3b6:	b7 95       	ror	r27
 3b8:	f1 11       	cpse	r31, r1
 3ba:	f8 cf       	rjmp	.-16     	; 0x3ac <__floatsisf+0x1c>
 3bc:	fa f4       	brpl	.+62     	; 0x3fc <__floatsisf+0x6c>
 3be:	bb 0f       	add	r27, r27
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <__floatsisf+0x36>
 3c2:	60 ff       	sbrs	r22, 0
 3c4:	1b c0       	rjmp	.+54     	; 0x3fc <__floatsisf+0x6c>
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	8f 4f       	sbci	r24, 0xFF	; 255
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	16 c0       	rjmp	.+44     	; 0x3fc <__floatsisf+0x6c>
 3d0:	88 23       	and	r24, r24
 3d2:	11 f0       	breq	.+4      	; 0x3d8 <__floatsisf+0x48>
 3d4:	96 e9       	ldi	r25, 0x96	; 150
 3d6:	11 c0       	rjmp	.+34     	; 0x3fa <__floatsisf+0x6a>
 3d8:	77 23       	and	r23, r23
 3da:	21 f0       	breq	.+8      	; 0x3e4 <__floatsisf+0x54>
 3dc:	9e e8       	ldi	r25, 0x8E	; 142
 3de:	87 2f       	mov	r24, r23
 3e0:	76 2f       	mov	r23, r22
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <__floatsisf+0x5e>
 3e4:	66 23       	and	r22, r22
 3e6:	71 f0       	breq	.+28     	; 0x404 <__floatsisf+0x74>
 3e8:	96 e8       	ldi	r25, 0x86	; 134
 3ea:	86 2f       	mov	r24, r22
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	2a f0       	brmi	.+10     	; 0x3fc <__floatsisf+0x6c>
 3f2:	9a 95       	dec	r25
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	da f7       	brpl	.-10     	; 0x3f2 <__floatsisf+0x62>
 3fc:	88 0f       	add	r24, r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	97 f9       	bld	r25, 7
 404:	08 95       	ret

00000406 <__fp_split3>:
 406:	57 fd       	sbrc	r21, 7
 408:	90 58       	subi	r25, 0x80	; 128
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	59 f0       	breq	.+22     	; 0x426 <__fp_splitA+0x10>
 410:	5f 3f       	cpi	r21, 0xFF	; 255
 412:	71 f0       	breq	.+28     	; 0x430 <__fp_splitA+0x1a>
 414:	47 95       	ror	r20

00000416 <__fp_splitA>:
 416:	88 0f       	add	r24, r24
 418:	97 fb       	bst	r25, 7
 41a:	99 1f       	adc	r25, r25
 41c:	61 f0       	breq	.+24     	; 0x436 <__fp_splitA+0x20>
 41e:	9f 3f       	cpi	r25, 0xFF	; 255
 420:	79 f0       	breq	.+30     	; 0x440 <__fp_splitA+0x2a>
 422:	87 95       	ror	r24
 424:	08 95       	ret
 426:	12 16       	cp	r1, r18
 428:	13 06       	cpc	r1, r19
 42a:	14 06       	cpc	r1, r20
 42c:	55 1f       	adc	r21, r21
 42e:	f2 cf       	rjmp	.-28     	; 0x414 <__fp_split3+0xe>
 430:	46 95       	lsr	r20
 432:	f1 df       	rcall	.-30     	; 0x416 <__fp_splitA>
 434:	08 c0       	rjmp	.+16     	; 0x446 <__fp_splitA+0x30>
 436:	16 16       	cp	r1, r22
 438:	17 06       	cpc	r1, r23
 43a:	18 06       	cpc	r1, r24
 43c:	99 1f       	adc	r25, r25
 43e:	f1 cf       	rjmp	.-30     	; 0x422 <__fp_splitA+0xc>
 440:	86 95       	lsr	r24
 442:	71 05       	cpc	r23, r1
 444:	61 05       	cpc	r22, r1
 446:	08 94       	sec
 448:	08 95       	ret

0000044a <__fp_zero>:
 44a:	e8 94       	clt

0000044c <__fp_szero>:
 44c:	bb 27       	eor	r27, r27
 44e:	66 27       	eor	r22, r22
 450:	77 27       	eor	r23, r23
 452:	cb 01       	movw	r24, r22
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__mulsf3>:
 458:	0e 94 3f 02 	call	0x47e	; 0x47e <__mulsf3x>
 45c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 460:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 464:	38 f0       	brcs	.+14     	; 0x474 <__mulsf3+0x1c>
 466:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 46a:	20 f0       	brcs	.+8      	; 0x474 <__mulsf3+0x1c>
 46c:	95 23       	and	r25, r21
 46e:	11 f0       	breq	.+4      	; 0x474 <__mulsf3+0x1c>
 470:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 474:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 478:	11 24       	eor	r1, r1
 47a:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_szero>

0000047e <__mulsf3x>:
 47e:	0e 94 03 02 	call	0x406	; 0x406 <__fp_split3>
 482:	70 f3       	brcs	.-36     	; 0x460 <__mulsf3+0x8>

00000484 <__mulsf3_pse>:
 484:	95 9f       	mul	r25, r21
 486:	c1 f3       	breq	.-16     	; 0x478 <__mulsf3+0x20>
 488:	95 0f       	add	r25, r21
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	55 1f       	adc	r21, r21
 48e:	62 9f       	mul	r22, r18
 490:	f0 01       	movw	r30, r0
 492:	72 9f       	mul	r23, r18
 494:	bb 27       	eor	r27, r27
 496:	f0 0d       	add	r31, r0
 498:	b1 1d       	adc	r27, r1
 49a:	63 9f       	mul	r22, r19
 49c:	aa 27       	eor	r26, r26
 49e:	f0 0d       	add	r31, r0
 4a0:	b1 1d       	adc	r27, r1
 4a2:	aa 1f       	adc	r26, r26
 4a4:	64 9f       	mul	r22, r20
 4a6:	66 27       	eor	r22, r22
 4a8:	b0 0d       	add	r27, r0
 4aa:	a1 1d       	adc	r26, r1
 4ac:	66 1f       	adc	r22, r22
 4ae:	82 9f       	mul	r24, r18
 4b0:	22 27       	eor	r18, r18
 4b2:	b0 0d       	add	r27, r0
 4b4:	a1 1d       	adc	r26, r1
 4b6:	62 1f       	adc	r22, r18
 4b8:	73 9f       	mul	r23, r19
 4ba:	b0 0d       	add	r27, r0
 4bc:	a1 1d       	adc	r26, r1
 4be:	62 1f       	adc	r22, r18
 4c0:	83 9f       	mul	r24, r19
 4c2:	a0 0d       	add	r26, r0
 4c4:	61 1d       	adc	r22, r1
 4c6:	22 1f       	adc	r18, r18
 4c8:	74 9f       	mul	r23, r20
 4ca:	33 27       	eor	r19, r19
 4cc:	a0 0d       	add	r26, r0
 4ce:	61 1d       	adc	r22, r1
 4d0:	23 1f       	adc	r18, r19
 4d2:	84 9f       	mul	r24, r20
 4d4:	60 0d       	add	r22, r0
 4d6:	21 1d       	adc	r18, r1
 4d8:	82 2f       	mov	r24, r18
 4da:	76 2f       	mov	r23, r22
 4dc:	6a 2f       	mov	r22, r26
 4de:	11 24       	eor	r1, r1
 4e0:	9f 57       	subi	r25, 0x7F	; 127
 4e2:	50 40       	sbci	r21, 0x00	; 0
 4e4:	9a f0       	brmi	.+38     	; 0x50c <__mulsf3_pse+0x88>
 4e6:	f1 f0       	breq	.+60     	; 0x524 <__mulsf3_pse+0xa0>
 4e8:	88 23       	and	r24, r24
 4ea:	4a f0       	brmi	.+18     	; 0x4fe <__mulsf3_pse+0x7a>
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	bb 1f       	adc	r27, r27
 4f2:	66 1f       	adc	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	91 50       	subi	r25, 0x01	; 1
 4fa:	50 40       	sbci	r21, 0x00	; 0
 4fc:	a9 f7       	brne	.-22     	; 0x4e8 <__mulsf3_pse+0x64>
 4fe:	9e 3f       	cpi	r25, 0xFE	; 254
 500:	51 05       	cpc	r21, r1
 502:	80 f0       	brcs	.+32     	; 0x524 <__mulsf3_pse+0xa0>
 504:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 508:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_szero>
 50c:	5f 3f       	cpi	r21, 0xFF	; 255
 50e:	e4 f3       	brlt	.-8      	; 0x508 <__mulsf3_pse+0x84>
 510:	98 3e       	cpi	r25, 0xE8	; 232
 512:	d4 f3       	brlt	.-12     	; 0x508 <__mulsf3_pse+0x84>
 514:	86 95       	lsr	r24
 516:	77 95       	ror	r23
 518:	67 95       	ror	r22
 51a:	b7 95       	ror	r27
 51c:	f7 95       	ror	r31
 51e:	e7 95       	ror	r30
 520:	9f 5f       	subi	r25, 0xFF	; 255
 522:	c1 f7       	brne	.-16     	; 0x514 <__mulsf3_pse+0x90>
 524:	fe 2b       	or	r31, r30
 526:	88 0f       	add	r24, r24
 528:	91 1d       	adc	r25, r1
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__fp_inf>:
 532:	97 f9       	bld	r25, 7
 534:	9f 67       	ori	r25, 0x7F	; 127
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	08 95       	ret

0000053e <__fp_nan>:
 53e:	9f ef       	ldi	r25, 0xFF	; 255
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	08 95       	ret

00000544 <__fp_pscA>:
 544:	00 24       	eor	r0, r0
 546:	0a 94       	dec	r0
 548:	16 16       	cp	r1, r22
 54a:	17 06       	cpc	r1, r23
 54c:	18 06       	cpc	r1, r24
 54e:	09 06       	cpc	r0, r25
 550:	08 95       	ret

00000552 <__fp_pscB>:
 552:	00 24       	eor	r0, r0
 554:	0a 94       	dec	r0
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	05 06       	cpc	r0, r21
 55e:	08 95       	ret

00000560 <__fp_round>:
 560:	09 2e       	mov	r0, r25
 562:	03 94       	inc	r0
 564:	00 0c       	add	r0, r0
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0xc>
 568:	88 23       	and	r24, r24
 56a:	52 f0       	brmi	.+20     	; 0x580 <__fp_round+0x20>
 56c:	bb 0f       	add	r27, r27
 56e:	40 f4       	brcc	.+16     	; 0x580 <__fp_round+0x20>
 570:	bf 2b       	or	r27, r31
 572:	11 f4       	brne	.+4      	; 0x578 <__fp_round+0x18>
 574:	60 ff       	sbrs	r22, 0
 576:	04 c0       	rjmp	.+8      	; 0x580 <__fp_round+0x20>
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <__umulhisi3>:
 582:	a2 9f       	mul	r26, r18
 584:	b0 01       	movw	r22, r0
 586:	b3 9f       	mul	r27, r19
 588:	c0 01       	movw	r24, r0
 58a:	a3 9f       	mul	r26, r19
 58c:	70 0d       	add	r23, r0
 58e:	81 1d       	adc	r24, r1
 590:	11 24       	eor	r1, r1
 592:	91 1d       	adc	r25, r1
 594:	b2 9f       	mul	r27, r18
 596:	70 0d       	add	r23, r0
 598:	81 1d       	adc	r24, r1
 59a:	11 24       	eor	r1, r1
 59c:	91 1d       	adc	r25, r1
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
