
DA4T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d5  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010d  00000000  00000000  00000455  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000167  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ad  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a1  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <wait>:

void wait(unsigned int us)
//subroutine to cause a time delay relative to the frequency
{
	unsigned char n;
	n=us/2;
  80:	96 95       	lsr	r25
  82:	87 95       	ror	r24
	while (n!=0)
  84:	88 23       	and	r24, r24
  86:	49 f0       	breq	.+18     	; 0x9a <wait+0x1a>
	{
		n--;
  88:	81 50       	subi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	ef ec       	ldi	r30, 0xCF	; 207
  8c:	f7 e0       	ldi	r31, 0x07	; 7
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <wait+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <wait+0x14>
  94:	00 00       	nop
void wait(unsigned int us)
//subroutine to cause a time delay relative to the frequency
{
	unsigned char n;
	n=us/2;
	while (n!=0)
  96:	81 11       	cpse	r24, r1
  98:	f7 cf       	rjmp	.-18     	; 0x88 <wait+0x8>
  9a:	08 95       	ret

0000009c <main>:
		_delay_ms(1);
	}
}

int main()
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <main+0x6>
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x8>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;		//set PORTB as output
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;		//set PORTD as output
  ac:	8a b9       	out	0x0a, r24	; 10
	TCCR0A=0x21;		//Set OCR0B as I/O
  ae:	91 e2       	ldi	r25, 0x21	; 33
  b0:	94 bd       	out	0x24, r25	; 36
	TCCR0B=0x09;		//Set OCR0A as TOP, prescaler=1
  b2:	89 e0       	ldi	r24, 0x09	; 9
  b4:	85 bd       	out	0x25, r24	; 37
	TCCR1A=0x23;		//Set OCR1B as I/O, OCR1A as top
  b6:	23 e2       	ldi	r18, 0x23	; 35
  b8:	20 93 80 00 	sts	0x0080, r18
	TCCR1B=0x11;		//Set OCR1A as top, prescaler=1
  bc:	21 e1       	ldi	r18, 0x11	; 17
  be:	20 93 81 00 	sts	0x0081, r18
	TCCR2A=0x21;		//Set OCR2B as I/O, OCR2A as top
  c2:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B=0x09;		//Prescaler=1
  c6:	80 93 b1 00 	sts	0x00B1, r24
					{
						OCR0B=i; //sets OCR0B of timer2 for phase correct pwm
						for(unsigned char j=0; j<=b; j+=1)
						//change duty cycle of blue led at frequency b
						{
							OCR1B=j; //sets OCR2B of timer1 for phase correct pwm
  ca:	0f 2e       	mov	r0, r31
  cc:	fa e8       	ldi	r31, 0x8A	; 138
  ce:	cf 2e       	mov	r12, r31
  d0:	d1 2c       	mov	r13, r1
  d2:	f0 2d       	mov	r31, r0
							for(unsigned char k=0; k<=c; k+=1)
							//change duty cycle of red led at frequency c
							{
								OCR2B=k; //sets OCR2B of timer2 for phase correct pwm
  d4:	04 eb       	ldi	r16, 0xB4	; 180
  d6:	10 e0       	ldi	r17, 0x00	; 0
	TCCR2B=0x09;		//Prescaler=1
	
	while (1)
	//loop forever
	{
		for (unsigned int a=25; a<=230; a+=25)
  d8:	0f 2e       	mov	r0, r31
  da:	f9 e1       	ldi	r31, 0x19	; 25
  dc:	8f 2e       	mov	r8, r31
  de:	91 2c       	mov	r9, r1
  e0:	f0 2d       	mov	r31, r0
		//for loop to control 10%-90% frequency for green led
		{
			OCR0A=a;	//sets OCR0A as the top value, thus changing freqeuncy
			for(unsigned int b=25; b<=230; b+=25)
  e2:	31 2c       	mov	r3, r1
				{
					OCR2A=c; //sets OCR2A as the top value, thus changing frequency
					for(unsigned int i=0; i<=a; i+=1)
					//change duty cycle of green led at frequency a
					{
						OCR0B=i; //sets OCR0B of timer2 for phase correct pwm
  e4:	21 2c       	mov	r2, r1
  e6:	29 82       	std	Y+1, r2	; 0x01
  e8:	1a 82       	std	Y+2, r1	; 0x02
	//loop forever
	{
		for (unsigned int a=25; a<=230; a+=25)
		//for loop to control 10%-90% frequency for green led
		{
			OCR0A=a;	//sets OCR0A as the top value, thus changing freqeuncy
  ea:	87 bc       	out	0x27, r8	; 39
			for(unsigned int b=25; b<=230; b+=25)
  ec:	0f 2e       	mov	r0, r31
  ee:	f9 e1       	ldi	r31, 0x19	; 25
  f0:	ef 2e       	mov	r14, r31
  f2:	f0 2d       	mov	r31, r0
  f4:	f3 2c       	mov	r15, r3
			//for loop to control 10%-90% frequency for blue led
			{
				OCR1A=b;
  f6:	e8 e8       	ldi	r30, 0x88	; 136
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	f1 82       	std	Z+1, r15	; 0x01
  fc:	e0 82       	st	Z, r14
				OCR1AH=b>>8;	//sets OCR1A as the top value, thus changing frequency
  fe:	e9 e8       	ldi	r30, 0x89	; 137
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	f0 82       	st	Z, r15
				for (unsigned int c=25; c<=230; c+=25)
 104:	f9 e1       	ldi	r31, 0x19	; 25
 106:	fb 83       	std	Y+3, r31	; 0x03
 108:	3c 82       	std	Y+4, r3	; 0x04
					{
						OCR0B=i; //sets OCR0B of timer2 for phase correct pwm
						for(unsigned char j=0; j<=b; j+=1)
						//change duty cycle of blue led at frequency b
						{
							OCR1B=j; //sets OCR2B of timer1 for phase correct pwm
 10a:	41 2c       	mov	r4, r1
 10c:	54 2c       	mov	r5, r4
				OCR1A=b;
				OCR1AH=b>>8;	//sets OCR1A as the top value, thus changing frequency
				for (unsigned int c=25; c<=230; c+=25)
				//for loop to control 10%-90% frequency for red led
				{
					OCR2A=c; //sets OCR2A as the top value, thus changing frequency
 10e:	2b 81       	ldd	r18, Y+3	; 0x03
 110:	e3 eb       	ldi	r30, 0xB3	; 179
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	20 83       	st	Z, r18
					for(unsigned int i=0; i<=a; i+=1)
 116:	a2 2c       	mov	r10, r2
 118:	b1 2c       	mov	r11, r1
					//change duty cycle of green led at frequency a
					{
						OCR0B=i; //sets OCR0B of timer2 for phase correct pwm
 11a:	a8 bc       	out	0x28, r10	; 40
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	64 2c       	mov	r6, r4
						for(unsigned char j=0; j<=b; j+=1)
						//change duty cycle of blue led at frequency b
						{
							OCR1B=j; //sets OCR2B of timer1 for phase correct pwm
 122:	f6 01       	movw	r30, r12
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
 128:	75 2c       	mov	r7, r5
							for(unsigned char k=0; k<=c; k+=1)
							//change duty cycle of red led at frequency c
							{
								OCR2B=k; //sets OCR2B of timer2 for phase correct pwm
 12a:	f8 01       	movw	r30, r16
 12c:	70 82       	st	Z, r7
								wait(c); //delay to allow user to see colors/changes
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	9c 81       	ldd	r25, Y+4	; 0x04
 132:	0e 94 40 00 	call	0x80	; 0x80 <wait>
						OCR0B=i; //sets OCR0B of timer2 for phase correct pwm
						for(unsigned char j=0; j<=b; j+=1)
						//change duty cycle of blue led at frequency b
						{
							OCR1B=j; //sets OCR2B of timer1 for phase correct pwm
							for(unsigned char k=0; k<=c; k+=1)
 136:	73 94       	inc	r7
 138:	87 2d       	mov	r24, r7
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2b 81       	ldd	r18, Y+3	; 0x03
 13e:	3c 81       	ldd	r19, Y+4	; 0x04
 140:	28 17       	cp	r18, r24
 142:	39 07       	cpc	r19, r25
 144:	90 f7       	brcc	.-28     	; 0x12a <main+0x8e>
					OCR2A=c; //sets OCR2A as the top value, thus changing frequency
					for(unsigned int i=0; i<=a; i+=1)
					//change duty cycle of green led at frequency a
					{
						OCR0B=i; //sets OCR0B of timer2 for phase correct pwm
						for(unsigned char j=0; j<=b; j+=1)
 146:	63 94       	inc	r6
 148:	86 2d       	mov	r24, r6
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	e8 16       	cp	r14, r24
 14e:	f9 06       	cpc	r15, r25
 150:	40 f7       	brcc	.-48     	; 0x122 <main+0x86>
				OCR1AH=b>>8;	//sets OCR1A as the top value, thus changing frequency
				for (unsigned int c=25; c<=230; c+=25)
				//for loop to control 10%-90% frequency for red led
				{
					OCR2A=c; //sets OCR2A as the top value, thus changing frequency
					for(unsigned int i=0; i<=a; i+=1)
 152:	3f ef       	ldi	r19, 0xFF	; 255
 154:	a3 1a       	sub	r10, r19
 156:	b3 0a       	sbc	r11, r19
 158:	8a 14       	cp	r8, r10
 15a:	9b 04       	cpc	r9, r11
 15c:	f0 f6       	brcc	.-68     	; 0x11a <main+0x7e>
			for(unsigned int b=25; b<=230; b+=25)
			//for loop to control 10%-90% frequency for blue led
			{
				OCR1A=b;
				OCR1AH=b>>8;	//sets OCR1A as the top value, thus changing frequency
				for (unsigned int c=25; c<=230; c+=25)
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	9c 81       	ldd	r25, Y+4	; 0x04
 162:	49 96       	adiw	r24, 0x19	; 25
 164:	9c 83       	std	Y+4, r25	; 0x04
 166:	8b 83       	std	Y+3, r24	; 0x03
 168:	8a 3f       	cpi	r24, 0xFA	; 250
 16a:	91 05       	cpc	r25, r1
 16c:	81 f6       	brne	.-96     	; 0x10e <main+0x72>
	{
		for (unsigned int a=25; a<=230; a+=25)
		//for loop to control 10%-90% frequency for green led
		{
			OCR0A=a;	//sets OCR0A as the top value, thus changing freqeuncy
			for(unsigned int b=25; b<=230; b+=25)
 16e:	99 e1       	ldi	r25, 0x19	; 25
 170:	e9 0e       	add	r14, r25
 172:	f1 1c       	adc	r15, r1
 174:	ea ef       	ldi	r30, 0xFA	; 250
 176:	ee 16       	cp	r14, r30
 178:	f1 04       	cpc	r15, r1
 17a:	09 f0       	breq	.+2      	; 0x17e <main+0xe2>
 17c:	bc cf       	rjmp	.-136    	; 0xf6 <main+0x5a>
	TCCR2B=0x09;		//Prescaler=1
	
	while (1)
	//loop forever
	{
		for (unsigned int a=25; a<=230; a+=25)
 17e:	f9 e1       	ldi	r31, 0x19	; 25
 180:	8f 0e       	add	r8, r31
 182:	91 1c       	adc	r9, r1
 184:	2a ef       	ldi	r18, 0xFA	; 250
 186:	82 16       	cp	r8, r18
 188:	91 04       	cpc	r9, r1
 18a:	09 f0       	breq	.+2      	; 0x18e <main+0xf2>
 18c:	ae cf       	rjmp	.-164    	; 0xea <main+0x4e>
 18e:	a4 cf       	rjmp	.-184    	; 0xd8 <main+0x3c>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
