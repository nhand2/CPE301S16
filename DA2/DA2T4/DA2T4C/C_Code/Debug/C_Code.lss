
C_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000fb  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009b  00000000  00000000  00000357  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f7  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000195  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f3  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_1>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  78:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sub_delay>:
#include <avr/interrupt.h>

void sub_delay()
//delay subroutine that creates a 50% duty cycle clock w/ period of 5 seconds
{
	TCNT1=63583;				//sets counter to 63583, which takes 0.25 s to overflow
  80:	8f e5       	ldi	r24, 0x5F	; 95
  82:	98 ef       	ldi	r25, 0xF8	; 248
  84:	90 93 85 00 	sts	0x0085, r25
  88:	80 93 84 00 	sts	0x0084, r24
	TCCR1A=0x00;				//normal more operation
  8c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x05;				//prescaler of 1024
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24
	while((TIFR1&0x01)==0);		//loops until TOV1 is set
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <sub_delay+0x16>
	TCCR1B=0x00;				//stops the timer
  9a:	10 92 81 00 	sts	0x0081, r1
	TIFR1|=(1<<TOV1);			//clear TOV1 flag
  9e:	b0 9a       	sbi	0x16, 0	; 22
	PORTC=PORTC ^(0x01);		//xor PORTC, PC.0 specifically to toggle a clock
  a0:	98 b1       	in	r25, 0x08	; 8
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	08 95       	ret

000000aa <__vector_1>:
}

ISR (INT0_vect)
//interrupt routine that toggles PC.4 every 5 rising clock edges
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	PORTC^=(1<<PORTC4);
  b8:	98 b1       	in	r25, 0x08	; 8
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	89 27       	eor	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_2>:

ISR (INT1_vect)
//interrupt routine that toggles PC.5 every 10 rising clock edges
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	PORTC^=(1<<PORTC5);
  dc:	98 b1       	in	r25, 0x08	; 8
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	89 27       	eor	r24, r25
  e2:	88 b9       	out	0x08, r24	; 8
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <main>:

int main(void)
{
	unsigned char toggle1=0;	//toggle counter for 5 rising clock edges
	unsigned char toggle2=0;	//toggle counter for 10 rising clock edges
	DDRB=0xFF;					//PORTB will be used to output the counter
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;					//Initialize the out to output LOW signal
  f6:	15 b8       	out	0x05, r1	; 5
	DDRC=0x31;					//PC.4 and 5 were used to output every 5 and 10 rising pulses due to availability on the board
  f8:	81 e3       	ldi	r24, 0x31	; 49
  fa:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;					//Clears the PORTC to output LOW signal
  fc:	18 b8       	out	0x08, r1	; 8
	DDRD=0x0C;					//PD.4 is set to be used at T0 to take input from the clock generated
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	8a b9       	out	0x0a, r24	; 10
	
	TCNT0=0x00;					//counter 0 that will output to PORTB
 102:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0x00;				//Setting counter to normal mode operation
 104:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x07;				//sets counter to accept external clock (PD4)
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	85 bd       	out	0x25, r24	; 37
	
//This set of instructions sets the interrupt registers
	EICRA=0x0F;					//sets interrupts INT0 and INT1 to trigger on rising edge
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	80 93 69 00 	sts	0x0069, r24
	EIMSK=0x03;					//enables INT0 and INT1 to be used as outputs
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	8d bb       	out	0x1d, r24	; 29
	sei();						//enables all global interrupts
 114:	78 94       	sei
}

int main(void)
{
	unsigned char toggle1=0;	//toggle counter for 5 rising clock edges
	unsigned char toggle2=0;	//toggle counter for 10 rising clock edges
 116:	d0 e0       	ldi	r29, 0x00	; 0
	PORTC^=(1<<PORTC5);
}

int main(void)
{
	unsigned char toggle1=0;	//toggle counter for 5 rising clock edges
 118:	c0 e0       	ldi	r28, 0x00	; 0
			++toggle2;
		}
		if (toggle1==5)
		//if toggle1=5, output 1 to PD.2 to trigger INT0
		{
			PORTD^=(1<<PORTD2);	//set PD.2
 11a:	68 94       	set
 11c:	ff 24       	eor	r15, r15
 11e:	f2 f8       	bld	r15, 2
			toggle1=0;			//reset toggle1
 120:	00 e0       	ldi	r16, 0x00	; 0
			PORTD^=(1<<PORTD2);	//clear PD.2
		}
		if (toggle2==10)
		//if toggle2=10, output 1 to PD.3 to trigger INT0
		{
			PORTD^=(1<<PORTD3);	//set PD.3
 122:	18 e0       	ldi	r17, 0x08	; 8
	sei();						//enables all global interrupts
	
	while(1)
	//while loop that will execute forever	
	{
		sub_delay();			//Subroutine to cause a delay of 0.25s which will cause a 5s period for the clock
 124:	0e 94 40 00 	call	0x80	; 0x80 <sub_delay>
		PORTB=TCNT0;
 128:	86 b5       	in	r24, 0x26	; 38
 12a:	85 b9       	out	0x05, r24	; 5
		if ((PORTC&(0x01))==1)
 12c:	40 9b       	sbis	0x08, 0	; 8
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x42>
		//checks if clock rising edge to increment toggle counters
		{
			++toggle1;
 130:	cf 5f       	subi	r28, 0xFF	; 255
			++toggle2;
 132:	df 5f       	subi	r29, 0xFF	; 255
		}
		if (toggle1==5)
 134:	c5 30       	cpi	r28, 0x05	; 5
 136:	39 f4       	brne	.+14     	; 0x146 <main+0x54>
		//if toggle1=5, output 1 to PD.2 to trigger INT0
		{
			PORTD^=(1<<PORTD2);	//set PD.2
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 25       	eor	r24, r15
 13c:	8b b9       	out	0x0b, r24	; 11
			toggle1=0;			//reset toggle1
			PORTD^=(1<<PORTD2);	//clear PD.2
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 25       	eor	r24, r15
 142:	8b b9       	out	0x0b, r24	; 11
		}
		if (toggle1==5)
		//if toggle1=5, output 1 to PD.2 to trigger INT0
		{
			PORTD^=(1<<PORTD2);	//set PD.2
			toggle1=0;			//reset toggle1
 144:	c0 2f       	mov	r28, r16
			PORTD^=(1<<PORTD2);	//clear PD.2
		}
		if (toggle2==10)
 146:	da 30       	cpi	r29, 0x0A	; 10
 148:	69 f7       	brne	.-38     	; 0x124 <main+0x32>
		//if toggle2=10, output 1 to PD.3 to trigger INT0
		{
			PORTD^=(1<<PORTD3);	//set PD.3
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	81 27       	eor	r24, r17
 14e:	8b b9       	out	0x0b, r24	; 11
			toggle2=0;			//reset toggle2
			PORTD^=(1<<PORTD3);	//clear PD.3
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	81 27       	eor	r24, r17
 154:	8b b9       	out	0x0b, r24	; 11
		}
		if (toggle2==10)
		//if toggle2=10, output 1 to PD.3 to trigger INT0
		{
			PORTD^=(1<<PORTD3);	//set PD.3
			toggle2=0;			//reset toggle2
 156:	d0 2f       	mov	r29, r16
 158:	e5 cf       	rjmp	.-54     	; 0x124 <main+0x32>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
